#!/data/data/com.termux/files/usr/bin/bash

#********************************************#
#                                            #
#  Rewind v4.1                               #
#  A CLI tool to backup and restore termux   #
#  Author : https://github.com/laraib07      #
#                                            #
#********************************************#


#variables
BACKUP_SOURCE='/data/data/com.termux/files'
BACKUP_TARGET='/storage/emulated/0/Termux/Backup'
NULL='/dev/null'

#colors
R='\033[1;31m'
G='\033[1;32m'
W='\033[1;37m'
B='\033[1;34m'
off='\033[0m'
t='        '
OK="$W[$G OK $W]"
NOK="$W[$R !! $W]"


banner()
{
    
    echo -e "\033[?47h\n"   #backup current screen
    clear
    echo -e " $W╭────────────────────────────────────╮"
    echo -e " │ $R   █▀▀█ █▀▀  █   █  ▀  █▀▀▄ █▀▀▄ $W  ├─╮"
    echo -e " │ $R   █▄▄▀ █▀▀  █▄█▄█ ▀█▀ █  █ █  █ $W  │ │"
    echo -e " │ $R   ▀ ▀▀ ▀▀▀   ▀ ▀  ▀▀▀ ▀  ▀ ▀▀▀  $W  │ │"
    echo -e " ╰─┬──────────────────────────────────╯ │ "
    echo -e "   ╰────────────────────────────────────╯"
    echo
}

help()
{
    echo -e "${off} Usage: ${W}rewind${off} [options] "
    echo -e "  -h   --help         print this usage and exit"
    echo -e "  -v   --version      print version"
    echo -e "  -b   --backup       backup termux"
    echo -e "  -r   --restore      restore texmux"

}

version()
{
    echo -e "${off}Rewind v4.1"
    echo "A CLI tool to backup and restore termux"
    echo "Author : https://github.com/laraib07"

}

backup_restore_template()
{
    echo -e " $NOK Select directory to $1 :${W}"
    echo
    echo -e "${t} [$B h$W ]  home"
    echo -e "${t} [$B u$W ]  usr"
    echo -e "${t} [$B b$W ]  both"
    echo -e "${t} [$B q$W ]  QUIT"
    echo
    echo -e " ${NOK} Enter any option(default = home) :${B} \c"

}

backup()
{
    if [[ ! -d $BACKUP_TARGET ]]
    then
        mkdir -p $BACKUP_TARGET
    fi

    backing_up()
    {
        echo -e "\033[?25l"   # hide cursor
        echo -e " $NOK Backing up ${1}"
        echo -e "${t}${off}Be patient!!!\n"

        tar -I pigz -cf ${1}.backup ${1} && mv ${1}.backup "$BACKUP_TARGET"

        if [ $? -eq 0 ]
        then
            echo -e " $OK ${1} backed up!!!\a"
        fi

    }

    cd $BACKUP_SOURCE/

    while true
    do
        banner

        backup_restore_template backup

        read reply
        reply=${reply:-"h"}
        reply=$(echo $reply | tr A-Z a-z)

        case $reply in
            h )
                backing_up home
                break
                ;;

            u )
                backing_up usr
                break
                ;;

            b )
                backing_up home
                backing_up usr
                break
                ;;

            q )
                break ;;

            * )
                echo -e " $NOK Invalid option" >&2
                sleep 2

        esac
    done

    sleep 1   #to hold backed up msg
}

restore()
{
    restoring()
    {
        echo -e "\033[?25l"   # hide cursor
        if [[ -f $BACKUP_TARGET/${1}.backup ]]
        then
            cd $BACKUP_SOURCE
            # copying backup to source to avoid
            # any permission issue or error
            cp $BACKUP_TARGET/${1}.backup .
            chmod 777 ${1}.backup

            echo -e " $NOK Restoring ${1}..."
            echo -e "${t}${off}Be patient!!!"

            tar -I pigz -xf ${1}.backup 
            rm -rf ${1}.backup   # remove copied backup

            echo
            echo -e " $OK ${1} restored!!!"
            echo -e "${t}${W}Start a new session.\a"

        else
            echo -e " $NOK ${1} backup not found." >&2

        fi

    }

    while true
    do
        banner

        backup_restore_template restore

        read reply
        reply=${reply:-h}
        reply=$(echo $reply | tr A-Z a-z)

        case $reply in
            h )
                restoring home
                break
                ;;

            u )
                restoring usr
                break
                ;;

            b )
                restoring home
                restoring usr
                break
                ;;

            q )
                break ;;

            * )
                echo -e " $NOK Invalid option" >&2
                sleep 2

        esac

    done

    sleep 1  # hold screen after restored msg
}

install_dependencies()
{
    if  ! [[ $(which tar) && $(which pigz) ]]
    then
        # checking net connection
        if ping -q -w 1 -c 1 www.google.com &> $NULL
        then
            echo -e " $NOK Installing Depedencies..."

            apt-get update &> $NULL && apt-get upgrade -y &> $NULL
            apt-get install -y tar pigz &> $NULL

            termux-setup-storage  # get storage perm

            if  [[ $(which tar) && $(which pigz) ]]
            then
                echo -e " $OK Dependencies Installed..."

            fi

        else
            echo -e " $NOK Network connection failed" >&2
            echo -e " $NOK Check your network connection and try again." >&2
            exit 1

        fi

    fi
}

signal()
{
    cd $BACKUP_SOURCE

    #removing temporary files
    [[ -f home.backup ]] && rm -f home.backup
    [[ -f usr.backup ]] && rm -f usr.backup

    echo -e "\n $NOK Programme terminated unexpectedly." >&2
    sleep 1
    echo -e "\033[?25h\c"   # show cursor
    echo -e "\033[?47l\c"   # Restore normal screen

    exit 1
}

# trapping signal
trap signal 1 2 3 15 20

# Driver Code
if [ ! $# == 0 ]
then
    install_dependencies

    case $1 in
        "-h" | "--help" )

            help ;;

        "-v" | "--version" )

            version ;;

        "-r" | "--restore" )

            restore ;;

        "-b" | "--backup" )

            backup ;;

        * )
            echo -e " $NOK Invalid option\n"  >&2

            help

    esac

    echo -e "\033[?25h\c"   # show cursor
    echo -e "\033[?47l\c"   # Restore normal screen

else
    echo -e " $NOK No options provided." >&2
    echo -e "${off} try 'rewind --help' or 'rewind -h' for help."

fi

exit 0
