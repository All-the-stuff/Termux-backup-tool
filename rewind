#!/data/data/com.termux/files/usr/bin/bash

#********************************************#
#                                            #
#  Rewind v2.0                               #
#  A CLI tool to backup and restore termux   #
#  Authered by Laraib07                      #
#                                            #
#********************************************#


#variables
BACKUP_SOURCE='/data/data/com.termux/files'
BACKUP_DESTINATION='/storage/emulated/0/Termux/Backup'
NULL='/dev/null'

#colors
R='\033[1;31m'
G='\033[1;32m'
W='\033[1;37m'
B='\033[1;34m'
off='\033[0m'
t='        '
OK='\033[1;37m[\033[1;32m OK \033[1;37m]'
NOK='\033[1;37m[\033[1;31m !! \033[1;37m]'

termux-setup-storage

banner()
{
        clear
        echo
        echo -e " $W╭────────────────────────────────────╮"
        echo -e " │ $R   █▀▀█ █▀▀  █   █  ▀  █▀▀▄ █▀▀▄ $W  ├─╮"
        echo -e " │ $R   █▄▄▀ █▀▀  █▄█▄█ ▀█▀ █  █ █  █ $W  │ │"
        echo -e " │ $R   ▀ ▀▀ ▀▀▀   ▀ ▀  ▀▀▀ ▀  ▀ ▀▀▀  $W  │ │"
        echo -e " ╰─┬──────────────────────────────────╯ │ "
        echo -e "   ╰────────────────────────────────────╯"
        echo
}

help()
{
        echo -ne "${off}\r"
        echo -e "Usage: ${W}rewind${off} [options] "
        echo -e "  -h   --help         print this usage and exit"
        echo -e "  -v   --version      print version"
        echo -e "  -b   --backup       take termux backup"
        echo -e "  -r   --restore      restore texmux"

}

version()
{
        echo -ne "${off}\r"
        echo "rewind v2.0"
        echo "A CLI tool to backup and restore termux"
        echo "authered by Laraib"

}

backup_restore_template()
{
        echo -e " $NOK Select directory to $1 :"
        echo
        echo -e "${t}${W} [$B h$W ]  home"
        echo -e "${t}${W} [$B u$W ]  usr"
        echo -e "${t}${W} [$B b$W ]  both"
        echo -e "${t}${W} [$B q$W ]  QUIT"
        echo
        echo -e " ${NOK} Enter any option(default = home) :${B} \c"
        tput cvvis

}

backup()
{
        if [[ ! -d $BACKUP_DESTINATION ]]
        then
                mkdir -p $BACKUP_DESTINATION
        fi

        cd $BACKUP_SOURCE/

        while [[ "$reply" != "q" ]]
        do
                banner

                backup_restore_template backup


                read reply
                [[ -z reply ]] && reply="h"
                reply=$(echo $reply | tr A-Z a-z)

                tput civis
                case $reply in
                        [hubHUB] )
	  echo
	  echo -e " $NOK Backing up termux"
	  sleep 1
	  echo -e "${t}Be patient!!!"
                esac

                case $reply in
                        h )
	  tar -czf home.backup home && mv home.backup $BACKUP_DESTINATION/
	  reply="q"
	  ;;
                        u )
	  tar -czf usr.backup usr  && mv usr.backup $BACKUP_DESTINATION/
	  reply="q"
	  ;;
                        b )
	  tar -czf home.backup home && mv home.backup $BACKUP_DESTINATION/
	  tar -czf usr.backup usr  && mv usr.backup $BACKUP_DESTINATION/
	  reply="q"
	  ;;
                        q )
	  reply="q" ;;
                        * )
	  echo -e " $NOK Invalid option" >&2
	  sleep 2
                esac
        done

        if [[ $(find $BACKUP_DESTINATION -type f -name *.backup -cmin -0.05 | wc -l) -ge 1 ]]
        then
                echo -e " $OK Termux backed up!!!"
                echo -e "\a"
        fi
}

restore()
{
        if [[ -f $BACKUP_DESTINATION/${1}.backup ]]
        then
                cd $BACKUP_SOURCE
                cp $BACKUP_DESTINATION/${1}.backup .
                chmod 777 ${1}.backup
                tar -xzf ${1}.backup
                rm -rf ${1}.backup

                echo -e " $OK ${1} restored!!!"
                echo -e "${t}${W}Start a new session."
                echo -e "\a"

        else
                echo -e " $NOK ${1} backup not found." >&2

        fi

}

restore_prompt()
{
        while [[ "$reply" != "q" ]]
        do
                banner

                backup_restore_template restore


                read reply
                [[ -z reply ]] && reply="h"
                reply=$(echo $reply | tr A-Z a-z)

                tput civis
                case $reply in
                        [hubHUB] )
	  echo
	  echo -e " $NOK Restoring termux..."
	  sleep 1
	  echo -e "${t}Be patient!!!"
                esac

                case $reply in
                        h )
	  restore home
	  reply="q"
	  ;;
                        u )
	  restore usr
	  reply="q"
	  ;;
                        b )
	  restore home
	  restore usr
	  reply="q"
	  ;;
                        q )
	  reply="q" 
	  ;;
                        * )
	  echo -e " $NOK Invalid option" >&2
	  sleep 2
                esac
        done

}

dependency()
{
        if  ! [[ $(which tar) && $(which tput) ]]
        then
                if ping -q -w 1 -c 1 www.google.com &> /dev/null; then

                        echo -e " $NOK Installing Depedencies..."
                        apt-get update &> $NULL && apt-get upgrade -y &> $NULL
                        apt-get install -y tar ncurses-utils &> $NULL

                        if  [[ $(which tar) && $(which tput) ]]
                        then
	  echo -e " $OK Dependencies Installed..."

                        fi

                else
                        echo -e " $NOK Network connection failed" >&2
                        echo -e " $NOK Check your network connection and try again." >&2
                        exit 1
                fi

        fi
}

signal()
{
        [[ -f $BACKUP_SOURCE/home.backup ]] && rm -f $BACKUP_SOURCE/home.backup
        [[ -f $BACKUP_SOURCE/usr.backup ]] && rm -f $BACKUP_SOURCE/usr.backup
        echo -e "\n $NOK Programme terminated unexpectedly." >&2
        tput cvvis
        exit 1
}

trap signal 1 2 3 15 20


if [ ! $# == 0 ]
then
        dependency

        tput civis
        case $1 in
                "-h" | "--help" )

                        help ;;

                "-v" | "--version" )

                        version ;;

                "-r" | "--restore" )

                        restore_prompt ;;

                "-b" | "--backup" )
                        backup ;;

                * )
                        echo -e " $NOK Invalid option"  >&2
                        echo

                        help
        esac
        tput cvvis

else
        echo -e " $NOK No options provided." >&2
        echo -e "${off}try 'rewind --help' or 'rewind -h' for help."
fi


exit 0

