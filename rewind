#!/data/data/com.termux/files/usr/bin/bash

#********************************************#
#                                            #
#  Rewind v5.1                               #
#  A CLI tool to backup and restore termux   #
#  Author : https://github.com/laraib07      #
#                                            #
#********************************************#


#variables
readonly BACKUP_SOURCE='/data/data/com.termux/files'
readonly BACKUP_TARGET='/storage/emulated/0/Termux/Backup'
readonly program_name=$(basename "$0")

#colors
R='\033[1;31m' # red
G='\033[1;32m' # green
W='\033[1;37m' # white bold
off='\033[0m'  # turn off color
t='        '   # tab
OK=" $W[$G OK $W]"
NOT_OK=" $W[$R !! $W]"


function show_banner() {
    printf  "\033[?47h"        # save current screen
    printf  "\033[2J\033[1;1H" # clear screen
    printf  "\033[?25l\n"      # hide cursor
    printf  " $W╭────────────────────────────────────╮\n"
    printf  " │ $R   █▀▀█ █▀▀  █   █  ▀  █▀▀▄ █▀▀▄ $W  ├─╮\n"
    printf  " │ $R   █▄▄▀ █▀▀  █▄█▄█ ▀█▀ █  █ █  █ $W  │ │\n"
    printf  " │ $R   ▀ ▀▀ ▀▀▀   ▀ ▀  ▀▀▀ ▀  ▀ ▀▀▀  $W  │ │\n"
    printf  " ╰─┬──────────────────────────────────╯ │ \n"
    printf  "   ╰────────────────────────────────────╯\n\n"
}


function show_help() {
    printf  "${off}Usage: ${W}rewind${off} [-hv] [-r|-b home|usr]\n
    -h          print this usage
    -v          print version
    -b          backup termux
    -r          restore texmux\n"
}


function show_version() {
    grep "#$" "$0"  
}


function error() {
    printf "${program_name}: $*\n" >&2
}


function backup() {
    if [[ ! -d "${BACKUP_TARGET}" ]]; then
        mkdir -p "${BACKUP_TARGET}"
    fi

    cd "${BACKUP_SOURCE}"

    case "$1" in
        home|usr )

            show_banner
            printf  "${NOT_OK} Backing up ${1}\n"
            printf  "${t}${off}Be patient!!!\n\n"

            tar -I pigz -cf "$1".backup "$1" && mv "$1".backup "${BACKUP_TARGET}"

            if [[ $? -eq 0 ]]; then
                printf  "${OK} ${1} backed up!!!\a"
            fi

            sleep 1   #to hold backed up msg
            ;;

        * )
            error "invalid argument"
            show_help
            exit 1
            ;;
    esac
}


function restore() {
    case "$1" in
        home|usr )

            show_banner
            if [[ -f "${BACKUP_TARGET}"/"$1".backup ]]
            then
                cd "${BACKUP_SOURCE}"
                # copying backup to source to avoid
                # any permission issue or error
                cp "${BACKUP_TARGET}"/"$1".backup .
                chmod 777 "$1".backup

                printf  "${NOT_OK} Restoring ${1}...\n"
                printf  "${t}${off}Be patient!!!\n\n"

                tar -I pigz -xf "$1".backup
                rm -rf "$1".backup   # remove copied backup

                printf  "${OK} ${1} restored!!!\n"
                printf  "${t}${W}start a new session.\a"
                sleep 1    # hold screen

            else
                printf  "${NOT_OK} ${1} backup not found\n" >&2
                sleep 1    # hold screen
                exit 1
            fi
            ;;

        * )
            error "invalid argument"
            show_help
            exit 1
            ;;
    esac
}


function install_dependencies()
{
    if  ! [[ $(type -P tar) && $(type -P pigz) ]]
    then
        local null
        null="/dev/null"

        # checking net connection
        if ping -q -w 1 -c 1 www.google.com &> "$null"
        then
            printf  "${NOT_OK} Installing Dependencies...\n"

            apt-get update &> "$null" && apt-get upgrade -y &> "$null"
            apt-get install -y tar pigz &> "$null"

            termux-setup-storage  # get storage perm

            if  [[ $(type -P tar) && $(type -P pigz) ]]
            then
                printf  "${OK} Dependencies Installed...\n"
            fi

        else
            error "network connection failed"
            exit 1
        fi
    fi
}

# remove temporary files in BACKUP_SOURCE if any signal received.
function cleanup()
{
    cd "${BACKUP_SOURCE}"

    # removing temporary files
    for dir in {home,usr};do
        [[ -f "${dir}".backup ]] && rm -f "${dir}".backup
    done

    error  "\nprogramme terminated unexpectedly\n"
    printf "\033[?25h"   # show cursor
    printf "\033[?47l"   # Restore normal screen

    sleep 1 && exit 1
}

# trapping signal
trap cleanup 1 2 3 15 20

# installing required programmes
install_dependencies

# Driver Code
while getopts ":hvr:b:" arg ; do
    case "${arg}" in
        h ) show_help ;;
        v ) show_version ;;
        r ) restore "$OPTARG" ;;
        b ) backup "$OPTARG" ;;
        \?) error "unknown option\n"; exit 1 ;;
        : ) error "no arguments"; show_help; exit 1 ;;
    esac
done

if [[ -z "$1" ]]; then
    error "no options provided"
    printf "${off} try 'rewind -h' for help.\n"
    exit 1
fi

printf  "\033[?25h"   # show cursor
printf  "\033[?47l"   # Restore normal screen

exit 0
